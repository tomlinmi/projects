Relating tables

To recreate table, drop table in script first incase table already exists.

example

DROP TABLE if exists employees;

CREATE TABLE employees
(
  employee_id INTEGER PRIMARY KEY generated by default AS identity,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(100),
  title VARCHAR(100),
  salary NUMERIC,
  hire_date DATE
);


Create references between tables

<column name> <data type> REFERENCES <foreign table name>(<foreign column>)

example (department 1 to 1 with employee) manager is related to employee_id, unique to enforce 1 to 1
DROP TABLE if exists departments;

CREATE TABLE departments
(
  department_id INTEGER PRIMARY KEY generated by default AS identity,
  department_name VARCHAR(100) NOT NULL,
  manager INTEGER REFERENCES employees(employee_id) unique -- Foreign key
);


example  1 to many (1 customer to many orders)



DROP TABLE if exists customers;

CREATE TABLE customers
(
  customer_id INTEGER PRIMARY KEY generated by default AS identity,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  phone VARCHAR(100),
  email VARCHAR(100),
  street VARCHAR(255),
  city VARCHAR(100),
  zip_code VARCHAR(5)
);

DROP TABLE if exists orders;

CREATE TABLE orders
(
  order_id INTEGER PRIMARY KEY generated by default AS identity,
	order_status INTEGER NOT NULL,
  order_date DATE NOT NULL,
	shipped_date DATE,
  customer_id INTEGER REFERENCES customers(customer_id) NOT NULL -- Foreign key
);




examples Many to Many  ---need to create a join table

employees and project reports (multiple employees can work on multiple projects)

DROP TABLE if exists projects;

CREATE TABLE projects
(
  project_id INTEGER PRIMARY KEY generated by default AS identity,
  project_name VARCHAR(255) NOT NULL,
  budget NUMERIC DEFAULT 0,
  start_date DATE,
  end_date DATE
);


DROP TABLE if exists employees_projects;

CREATE TABLE employees_projects
(
  employee_id INTEGER REFERENCES employees(employee_id),
  project_id INTEGER REFERENCES projects(project_id),
  start_date DATE,
  end_date DATE,
  PRIMARY KEY (employee_id, project_id) -- Composite key
);



 combining the employee_id and project_id columns makes it possible to create a composite key. A composite key is a primary key created from combining multiple columns to guarantee the uniqueness of a record.
 
 CLEAR tables with truncate before adding data.  
 The RESTART IDENTITY clause is helpful if you have primary key fields in the tables that you want to restart at 1 when you start adding new records to the tables again.
 
 TRUNCATE
  tableA,
  tableB,
  tableC
RESTART IDENTITY;

Example:

TRUNCATE
  employees,
  departments,
  projects,
  employees_projects,
  customers,
  orders
RESTART IDENTITY;

-- Insert some data into the employees table
INSERT INTO employees
  (first_name, last_name, phone, title, salary, hire_date)
  VALUES
    ('Jane', 'Doe','5551234', 'CEO', 80000, '12/07/1999'),
    ('Wright', 'Palmer', '5554321', 'Manager', 60000, '01/06/2001'),
    ('Jim', 'Doe', '5555678', 'Accountant', 50000, '11/06/2015'),
    ('Toby', 'Bestley', '5558765', 'Associate', 35000, '09/07/2008') ,
    ('Meredith', 'Hartford', '5559876', 'Associate', 30000, '02/17/2014'),
    ('Tom', 'Flenderson', '5558769', 'Associate', 32000, '11/23/2013'),
    ('Bently', 'Singh', '5554326', 'Manager', 60000, '06/06/2005'),
    ('Winnie', 'Lim', '5554527', 'Manager', 62000, '10/24/2003'),
    ('Ruda', 'Bross', '5554428', 'Manager', 66000, '11/06/2004');

-- Insert four projects into the projects table
INSERT INTO projects
  (project_name, budget, start_date)
  VALUES
    ('Build Database', 20000, '3/4/2020'),
    ('Plan christmas party', 500, '11/20/2020'),
    ('Remove old stock', 1000, '4/6/2020'),
    ('Watch paint dry', 3000, '2/11/2020');

-- Insert some customers into the customers table
INSERT INTO customers
  (first_name, last_name, phone, email, street, city, zip_code)
  VALUES
    ('Kacie', 'Mckee','5555234', 'kacie.mckee@gmail.com', '61 Shadow Brook Court', 'Melrose, MA', '02176'),
    ('Moses', 'Mcghee', '5554651', 'moses.mcghee@gmail.com', '570 Old York St.', 'Upland, CA', '91784'),
    ('Jerome', 'Aguilar', '5555699', 'jerome.aguilar@yahoo.com', '68 Victoria Road', 'Hoboken, NJ', '07030'),
    ('Ainsley', 'Bonner', '5558564', 'ainsley.bonner@hotmail.com', '60 Winchester Road', 'Dundalk, MD', '21222') ,
    ('Delilah', 'Bateman', '5523124', 'delilah.bateman@gmail.com', '482 E. Oxford St.', 'Thibodaux, LA', '70301');
	
	DBeaver to generate ERD (entity relationship diagram).
	Under public folder, right click tables and select View diagram