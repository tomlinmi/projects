//Route parameters

Update this app to have /, /user/:userId, and 
/user/new routes. 
Any other route displays a 404 message.





import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";

function UserProfile() {
  const [user, setUser] = useState({});
  const { userId } = useParams();

  useEffect(() => {
    const abortController = new AbortController();

    async function loadUser() {
      try {
        const response = await fetch(
          `https://jsonplaceholder.typicode.com/users/${userId}`,
          { signal: abortController.signal }
        );

        const user = await response.json();
        setUser(user);
      } catch (error) {
        if (error.name !== "AbortError") {
          console.error(error);
        }
      }
    }

    loadUser();

    return () => {
      abortController.abort(); // cancels any pending request or response
    };
  }, [userId]);

  // You do not need to change this component

  if (user.id) {
    return Object.entries(user).map(([key, value]) => (
      <div key={key}>
        <label>{key}</label>: {JSON.stringify(value)}
        <hr />
      </div>
    ));
  }
  return "Loading...";
}

export default UserProfile;



import React from "react";
import {
  BrowserRouter as Router,
  Link,
  Route,
  Switch,
  } from "react-router-dom";

import "./App.css"; 

import UserProfile from "./UserProfile";


function App() {
  return (
       <Router>
    <div className="App">
      <Link to="/user/new">New User</Link>
      {Array(10)
        .fill()
        .map((ignoredValue, index) => index + 1)
        .map((id) => (
          <div key={id}>
            <Link to={`/user/${id}`} data-testid={`user-${id}`}>
              User{id}
            </Link>
          </div>
        ))}
      
      <Switch>
       <Route exact path="/user/new">
          <h1>Unable to create a new user</h1>
           </Route>
        
         <Route path="/user/:userId" >
           <UserProfile/>
           </Route>
        
        
        
         <Route>
          <h1>404 Not Found</h1>
          </Route>   
                
      </Switch>
    </div>
    </Router>
  );
}

export default App;


import React, { useEffect, useState } from "react";
import { useParams, Link, Route, Switch, NavLink, useRouteMatch} from "react-router-dom";
import UserProfile from "./UserProfile";
import { fetchUserWithPosts } from "../api";
import Post from "./Post";
import PostList from "./PostList";
import PostsNav from "./PostsNav";
import ErrorMessage from "../common/ErrorMessage";

export const User = () => {
  const [user, setUser] = useState({ posts: [] });
  const [error, setError] = useState(undefined);
  const {userId} = useParams (); // TODO: This ID will need to be pulled from parameters.
  const {url} = useRouteMatch();

  useEffect(() => {
    const abortController = new AbortController();
    fetchUserWithPosts(userId, abortController.signal)
      .then(setUser)
      .catch(setError);

    return () => abortController.abort();
  }, [userId]);

  // TODO: Change the link below to go back to the home page.

  if (error) {
    return (
      <Route>
      <ErrorMessage error={error}>
             <p>
        <Switch>       
        <Route>
        <Link to ="/">
          Return Home
        </Link>
        </Route>
          </Switch>
        </p>
       </ErrorMessage>
        </Route>
    );
  }

  /*
    TODO: In the below section, update the links to work appropriately with React Router.

    TODO: You'll need to add nested routes below.

    The <PostList /> component should show on the following route:
    /users/:userId/posts

    The <UserProfile /> component should show on the following route:
    /users/:userId
  */
  return (
    <section className="container">
      <PostsNav />
      <div className="border p-4 h-100 d-flex flex-column">
        <h2 className="mb-3">{user.name}</h2>
        <ul className="nav nav-tabs">
          <li className="nav-item">
            <Link to ={`${url}`}>
              Profile
              </Link>
          </li>
          <li className="nav-item">
          <Link to={`${url}/posts`}>
            Posts
            </Link> 
          </li>
        </ul>

        {user.id ? (
          <div className="p-4 border border-top-0">
            <Switch>
              <Route path = {`${url}/posts`}>
            <PostList posts={user.posts} />
                </Route>
              <Route exact path = {`${url}`}>
            <UserProfile user={user} />
              </Route>
              </Switch>
          </div>
        ) : (
          <div className="p-4 border border-top-0">
            <p>Loading...</p>
          </div>
        )}
      </div>
    </section>
  );
};

export default User;
