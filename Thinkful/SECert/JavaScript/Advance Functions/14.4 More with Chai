to.be.a()method  - This method allows you to check for the expected result's data type.
expect("Score").to.be.a("string");
expect(10).to.be.a("number");

to.be.an() method, which works exactly the same way.
expect({}).to.be.an("object");
The above method is very basic - only used early in TDD

use to.eql() to check for deep equality. That is, this method will check the contents of arrays and objects to see if they are the same.

expect(actual).to.eql(expected);

use to.equal() to check values, not arrays or objects

Key Methods
.empty()
https://www.chaijs.com/api/bdd/#method_empty
.includes()
https://www.chaijs.com/api/bdd/#method_include
.lengthof()
https://www.chaijs.com/api/bdd/#method_lengthof
true()
https://www.chaijs.com/api/bdd/#method_true

it is generally preferred to use the specific methods (like to.have.lengthOf()) when possible, because it makes the code and error messages easier to understand.

Example main.test.js file

const { expect } = require("chai");
const { medianScore, topScoringStudent } = require("../src/main");

describe("medianScore", () => {
  it("should return the student with the median score for a list of students", () => {
    const students = [
      { name: "Luana Barbosa", score: 9.2 },
      { name: "Evan Webb", score: 8.4 },
      { name: "Riley Morgan", score: 9.8 },
      { name: "Caleb Tyler", score: 6.9 },
      { name: "Val Avila", score: 7.4 },
    ];
    const actual = medianScore(students);
    const expected = 8.4;
  
    expect(actual).to.equal(expected);
  });
});

describe("topScoringStudent", () => {
  it("should return the student with the highest score for a list of students", () => {
    const students = [
      { name: "Luana Barbosa", score: 9.2 },
      { name: "Evan Webb", score: 8.4 },
      { name: "Riley Morgan", score: 9.8 },
      { name: "Caleb Tyler", score: 6.9 },
      { name: "Val Avila", score: 7.4 },
    ];
    const actual = topScoringStudent(students);
    const expected = { name: "Riley Morgan", score: 9.8 };
    expect(actual).to.be.an("object");
    expect(actual).to.eql(expected);
  });
});


